[{"path":"https://ryanzomorrodi.github.io/centr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 centr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ryanzomorrodi.github.io/centr/articles/typical_usage.html","id":"downloading-data","dir":"Articles","previous_headings":"","what":"Downloading Data","title":"Typical Usage","text":"can download census population estimates geographic layer files using ever convenient tidycensus package. sf also North Carolina counties file, use later, can always download census geometries directly census using tigris.","code":"library(centr) library(sf) library(tidycensus)  NC_tracts <- get_decennial(\"tract\", state = \"NC\", \"P1_001N\", year = 2020, geometry = TRUE) NC_counties <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))"},{"path":"https://ryanzomorrodi.github.io/centr/articles/typical_usage.html","id":"setting-up","dir":"Articles","previous_headings":"","what":"Setting Up","title":"Typical Usage","text":"need fields tells us county tract many people live within tract. Thankfully, first 5 digits GEOID, uniquely identify county tract , means can easily create new field ID. value field also gives us weights. Let’s use mean_center() get county geometries! Oh, looks like forgot one thing. least one tracts empty geometry. running mean_center(), must filter empty geometries.","code":"NC_tracts <- NC_tracts |>   transform(GEOID_county = substring(GEOID, 1, 5)) |>   subset(select = c(GEOID_county, value)) mean_center(NC_tracts, group = \"GEOID_county\", weight = \"value\") #> Error in x_checks(x, x_name, allowed_geom): `NC_tracts` contains empty geometries NC_tracts <- subset(NC_tracts, !st_is_empty(NC_tracts))"},{"path":"https://ryanzomorrodi.github.io/centr/articles/typical_usage.html","id":"calculation-mean-centers","dir":"Articles","previous_headings":"","what":"Calculation Mean Centers","title":"Typical Usage","text":"Now, can calculate mean centers! Let’s see looks.","code":"NC_county_means <- mean_center(NC_tracts, group = \"GEOID_county\", weight = \"value\") NC_county_means #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -84.02568 ymin: 34.0428 xmax: -75.67387 ymax: 36.49819 #> Geodetic CRS:  NAD83 #> First 10 features: #>    group                   geometry #> 1  37037  POINT (-79.2079 35.75337) #> 2  37105  POINT (-79.1755 35.46066) #> 3  37013 POINT (-76.94663 35.52365) #> 4  37001 POINT (-79.41359 36.07104) #> 5  37063 POINT (-78.90047 35.98795) #> 6  37065 POINT (-77.65082 35.90178) #> 7  37129 POINT (-77.87961 34.21068) #> 8  37151 POINT (-79.82808 35.76379) #> 9  37159 POINT (-80.52144 35.62169) #> 10 37181 POINT (-78.40247 36.33333) plot(st_geometry(NC_counties)) plot(st_geometry(NC_county_means), pch = 20, cex = 0.5, col = \"red\", add = TRUE)"},{"path":"https://ryanzomorrodi.github.io/centr/articles/typical_usage.html","id":"calculating-median-centers","dir":"Articles","previous_headings":"","what":"Calculating Median Centers","title":"Typical Usage","text":"can also calculate median centers, point minimizes distance geometries. median_center() supports projected coordinates, let’s project North Carolina state plane. Let’s see looks.  ’s whole game, go try !","code":"NC_tracts_proj <- st_transform(NC_tracts, crs = \"EPSG:32119\")  NC_county_medians <- NC_tracts_proj |>   median_center(group = \"GEOID_county\", weight = \"value\") NC_county_medians #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 152678.1 ymin: 30541.25 xmax: 908546.1 ymax: 309372.5 #> Projected CRS: NAD83 / North Carolina #> First 10 features: #>    group                  geometry #> 1  37037   POINT (594827.4 223972) #> 2  37105 POINT (593571.9 190317.3) #> 3  37013 POINT (792026.9 199744.2) #> 4  37001 POINT (571361.8 258461.8) #> 5  37063 POINT (618402.7 248046.7) #> 6  37065 POINT (732252.2 238926.9) #> 7  37129  POINT (712703.4 52208.8) #> 8  37151 POINT (535552.1 222369.7) #> 9  37159 POINT (472416.9 209383.7) #> 10 37181 POINT (662822.4 286103.9) NC_counties_proj <- st_transform(NC_counties, crs = \"EPSG:32119\")  plot(st_geometry(NC_counties_proj)) plot(st_geometry(NC_county_medians), pch = 20, cex = 0.5, col = \"red\", add = TRUE)"},{"path":"https://ryanzomorrodi.github.io/centr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Zomorrodi. Author, maintainer, copyright holder.","code":""},{"path":"https://ryanzomorrodi.github.io/centr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zomorrodi R (2024). centr: Weighted Unweighted Spatial Centers. R package version 0.1.0.9000, https://github.com/ryanzomorrodi/centR, https://ryanzomorrodi.github.io/centr/.","code":"@Manual{,   title = {centr: Weighted and Unweighted Spatial Centers},   author = {Ryan Zomorrodi},   year = {2024},   note = {R package version 0.1.0.9000, https://github.com/ryanzomorrodi/centR},   url = {https://ryanzomorrodi.github.io/centr/}, }"},{"path":"https://ryanzomorrodi.github.io/centr/index.html","id":"centr","dir":"","previous_headings":"","what":"Weighted and Unweighted Spatial Centers","title":"Weighted and Unweighted Spatial Centers","text":"Package Weighted Unweighted Spatial Centers","code":""},{"path":"https://ryanzomorrodi.github.io/centr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Weighted and Unweighted Spatial Centers","text":"","code":"# Install centr from CRAN install.packages(\"centr\")  # Or the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"ryanzomorrodi/centr\")"},{"path":"https://ryanzomorrodi.github.io/centr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Weighted and Unweighted Spatial Centers","text":"main functions mean_center median_center. designed calculation population weighted centroids, can extended forms analyses. Mean center calculates geographic average center. One can specify groups calculate individual centers groups weights individual point. analagous ArcGIS Pro Mean Center tool. Median center iteratively calculates point minimizes distance features. One can specify groups calculate individual centers weights individual point. analagous ArcGIS Pro Median Center tool.","code":"library(centr) df <- data.frame(   lon = c(20, 50, 30, 80, 10),   lat = c(25, 70, 30, 50, 30),   grp = c(\"a\", \"b\", \"a\", \"b\", \"a\"),   wt = c(1, 5, 1, 3, 2) ) x <- sf::st_as_sf(df, coords = c(\"lon\", \"lat\"), crs = 4326)  mean_center(x, group = \"grp\", weight = \"wt\") #> Simple feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 17.51482 ymin: 29.00224 xmax: 65.92087 ymax: 63.32603 #> Geodetic CRS:  WGS 84 #>   grp                  geometry #> 1   a POINT (17.51482 29.00224) #> 2   b POINT (65.92087 63.32603) library(centr) df <- data.frame(   lon = c(20, 50, 30, 80, 10),   lat = c(25, 70, 30, 50, 30),   grp = c(\"a\", \"b\", \"a\", \"b\", \"a\"),   wt = c(1, 5, 1, 3, 2) ) x <- sf::st_as_sf(df, coords = c(\"lon\", \"lat\"), crs = 4326) x_transformed <- sf::st_transform(x, crs = \"ESRI:102003\")  median_center(x_transformed, group = \"grp\", weight = \"wt\") #> Simple feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 4950281 ymin: 4293605 xmax: 8226081 ymax: 8151342 #> Projected CRS: USA_Contiguous_Albers_Equal_Area_Conic #>   grp                geometry #> 1   a POINT (8226081 4293605) #> 2   b POINT (4950281 8151342)"},{"path":"https://ryanzomorrodi.github.io/centr/reference/mean_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Center — mean_center","title":"Mean Center — mean_center","text":"Mean center calculates geographic average center. One can specify groups calculate individual centers groups weights individual point. analagous ArcGIS Pro Mean Center tool. st_is_longlat(x), mean center calculated assuming spherical Earth. Projected data calculated assuming \"flat\" Earth.","code":""},{"path":"https://ryanzomorrodi.github.io/centr/reference/mean_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Center — mean_center","text":"","code":"mean_center(x, group = NULL, weight = NULL)"},{"path":"https://ryanzomorrodi.github.io/centr/reference/mean_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Center — mean_center","text":"x Input POINT POLYGON simple features group name character column specifying groups calculate individual mean centers weight name numeric weight column specifying individual point's contribution mean center","code":""},{"path":"https://ryanzomorrodi.github.io/centr/reference/mean_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Center — mean_center","text":"sf object mean center group","code":""},{"path":"https://ryanzomorrodi.github.io/centr/reference/mean_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Center — mean_center","text":"","code":"df <- data.frame(   lon = c(20, 50, 30, 80, 10),   lat = c(25, 70, 30, 50, 30),   grp = c(\"a\", \"b\", \"a\", \"b\", \"a\"),   wt = c(1, 5, 1, 3, 2) ) x <- sf::st_as_sf(df, coords = c(\"lon\", \"lat\"), crs = 4326) mean_center(x, group = \"grp\", weight = \"wt\") #> Simple feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 17.51482 ymin: 29.00224 xmax: 65.92087 ymax: 63.32603 #> Geodetic CRS:  WGS 84 #>   group                  geometry #> 1     a POINT (17.51482 29.00224) #> 2     b POINT (65.92087 63.32603)"},{"path":"https://ryanzomorrodi.github.io/centr/reference/median_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Median Center — median_center","title":"Median Center — median_center","text":"Median center iteratively calculates point minimizes distance features. One can specify groups calculate individual centers weights individual point. analagous ArcGIS Pro Median Center tool. uses methodology introduced Kuhn Kuenne (1962). Currently, median center implemenented projected data.","code":""},{"path":"https://ryanzomorrodi.github.io/centr/reference/median_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median Center — median_center","text":"","code":"median_center(x, group = NULL, weight = NULL, tolerance = 1e-04)"},{"path":"https://ryanzomorrodi.github.io/centr/reference/median_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median Center — median_center","text":"x Input POINT, MULTIPOINT, POLYGON, MULTIPOLYGON simple features group name character column specifying groups calculate individual median centers weight name numeric weight column specifying individual point's contribution median center tolerance numeric threshold determining estimate improvement sufficiently small enough stop iterating (smaller = slower, precision)","code":""},{"path":"https://ryanzomorrodi.github.io/centr/reference/median_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median Center — median_center","text":"sf object median center group","code":""},{"path":"https://ryanzomorrodi.github.io/centr/reference/median_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median Center — median_center","text":"","code":"df <- data.frame(   lon = c(-88, -90, -92, -89, -90),   lat = c(42, 40, 30, 32, 42),   grp = c(\"a\", \"b\", \"a\", \"b\", \"a\"),   wt = c(1, 1, 1, 1, 1) ) x <- sf::st_as_sf(df, coords = c(\"lon\", \"lat\"), crs = 4326) x_transformed <- sf::st_transform(x, crs = \"ESRI:102003\") median_center(x_transformed, group = \"grp\", weight = \"wt\") #> Simple feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 542640.4 ymin: -147278.5 xmax: 582550.3 ymax: 482723.9 #> Projected CRS: USA_Contiguous_Albers_Equal_Area_Conic #>   group                   geometry #> 1     a  POINT (542640.4 482723.9) #> 2     b POINT (582550.3 -147278.5)"},{"path":"https://ryanzomorrodi.github.io/centr/news/index.html","id":"version-02","dir":"Changelog","previous_headings":"","what":"version 0.2","title":"version 0.2","text":"Warning given empty geometries returned due zero total weight groups Groups can just characters Support data.table sf objects tested Vignette added walkthrough typical usage","code":""},{"path":"https://ryanzomorrodi.github.io/centr/news/index.html","id":"version-01","dir":"Changelog","previous_headings":"","what":"version 0.1","title":"version 0.1","text":"Inital release Published CRAN","code":""}]
